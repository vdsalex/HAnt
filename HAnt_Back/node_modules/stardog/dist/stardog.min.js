!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.stardogjs=t()}(this,function(){"use strict";var e="stardog",t="1.4.0",r="Stardog JavaScript Framework for node.js and the browser - Develop apps using the Stardog RDF Database & JS.",n=["stardog","rdf","sparql","library","semantic web","linked data","query"],a="lib/index.js",o="dist/stardog.js",s="lib/index.d.ts",i={name:"Stardog Union",url:"http://stardog.com"},u="Apache-2.0",d=[{name:"Edgar Rodriguez",email:"edgar@complexible.com"},{name:"Fernando Hernandez",email:"fernando@complexible.com"},{name:"Maurice Rabb",email:"github@mauricerabb.com"},{name:"Laszlo"},{name:"Jonathan Abourbih",email:"jon.abourbih+github@gmail.com"},{name:"Andhika Nugraha",email:"andhika.nugraha@outlook.com"},{name:"BeArnis"},{name:"Ron Michael Zettlemoyer",email:"ron@zettlemoyer.com"},{name:"Stephen Nowell",email:"stephen@stardog.com"},{name:"Jason Rogers",email:"jason@stardog.com"},{name:"Adam Bretz",email:"arbretz@gmail.com"},{name:"sofayam"}],c={type:"git",url:"https://github.com/stardog-union/stardog.js"},h={url:"https://github.com/stardog-union/stardog.js/issues"},l={"fetch-ponyfill":"^4.1.0",flat:"^2.0.1","form-data":"^2.2.0","isomorphic-base64":"^1.0.2",lodash:"^4.17.4",querystring:"^0.2.0"},p={"@types/jest":"^20.0.2","@types/node-fetch":"^1.6.7","babel-plugin-transform-es2015-modules-commonjs":"^6.24.1","babel-preset-es2015-rollup":"^3.0.0",chalk:"^2.0.1",eslint:"^4.2.0","eslint-config-airbnb-base":"^11.2.0","eslint-config-prettier":"^2.3.0","eslint-plugin-import":"^2.7.0","eslint-plugin-prettier":"^2.1.2",husky:"^0.13.4",jest:"^23.5.0","lint-staged":"^4.0.0",mdchangelog:"^0.8.0",prettier:"^1.4.4",randomstring:"^1.1.5",rollup:"^0.43.0","rollup-plugin-babel":"^2.7.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-eslint":"^3.0.0","rollup-plugin-json":"^2.3.0","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-uglify":"^2.0.1",typedocs:"^0.6.5"},f={node:">=6.0.0"},v={build:"node scripts/build",docs:"node scripts/docs",test:"eslint '{lib,test}/**/*.js' --fix && jest test/*.spec.js --verbose -i",precommit:"lint-staged",format:"prettier '{lib,test}/**/*.js' --single-quote --trailing-comma es5 --write",version:"mdchangelog --remote stardog-union/stardog.js --no-prologue --order-milestones semver --order-issues closed_at --overwrite --no-orphan-issues && npm run docs && git add README.md CHANGELOG.md",prepublishOnly:"node scripts/triggerAnnoyingAlert.js && npm run build"},y={name:e,version:t,description:r,keywords:n,main:a,browser:o,types:s,author:i,license:u,contributors:d,repository:c,bugs:h,dependencies:l,devDependencies:p,engines:f,scripts:v,"lint-staged":{linters:{"{lib,test}/**/*.js":["prettier --single-quote --trailing-comma es5 --write","git add"]}},"stardog-version":">=5.0.0"},g=Object.freeze({name:e,version:t,description:r,keywords:n,main:a,browser:o,types:s,author:i,license:u,contributors:d,repository:c,bugs:h,dependencies:l,devDependencies:p,engines:f,scripts:v,default:y}),m="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function b(e,t){return e(t={exports:{}},t.exports),t.exports}var T=b(function(t,e){!function(r){function e(e){var b=e&&e.Promise||r.Promise,T=e&&e.XMLHttpRequest||r.XMLHttpRequest,t=r;return function(){var e=Object.create(t,{fetch:{value:void 0,writable:!0}});return function(e){if(!e.fetch){var s={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(s.arrayBuffer)var t=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(e){return e&&DataView.prototype.isPrototypeOf(e)},n=ArrayBuffer.isView||function(e){return e&&-1<t.indexOf(Object.prototype.toString.call(e))};c.prototype.append=function(e,t){e=i(e),t=u(t);var r=this.map[e];this.map[e]=r?r+","+t:t},c.prototype.delete=function(e){delete this.map[i(e)]},c.prototype.get=function(e){return e=i(e),this.has(e)?this.map[e]:null},c.prototype.has=function(e){return this.map.hasOwnProperty(i(e))},c.prototype.set=function(e,t){this.map[i(e)]=u(t)},c.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},c.prototype.keys=function(){var r=[];return this.forEach(function(e,t){r.push(t)}),d(r)},c.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),d(t)},c.prototype.entries=function(){var r=[];return this.forEach(function(e,t){r.push([t,e])}),d(r)},s.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},v.call(y.prototype),v.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},m.error=function(){var e=new m(null,{status:0,statusText:""});return e.type="error",e};var a=[301,302,303,307,308];m.redirect=function(e,t){if(-1===a.indexOf(t))throw new RangeError("Invalid status code");return new m(null,{status:t,headers:{location:e}})},e.Headers=c,e.Request=y,e.Response=m,e.fetch=function(r,a){return new b(function(n,e){var t=new y(r,a),o=new T;o.onload=function(){var e,a,t={status:o.status,statusText:o.statusText,headers:(e=o.getAllResponseHeaders()||"",a=new c,e.split(/\r?\n/).forEach(function(e){var t=e.split(":"),r=t.shift().trim();if(r){var n=t.join(":").trim();a.append(r,n)}}),a)};t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL");var r="response"in o?o.response:o.responseText;n(new m(r,t))},o.onerror=function(){e(new TypeError("Network request failed"))},o.ontimeout=function(){e(new TypeError("Network request failed"))},o.open(t.method,t.url,!0),"include"===t.credentials&&(o.withCredentials=!0),"responseType"in o&&s.blob&&(o.responseType="blob"),t.headers.forEach(function(e,t){o.setRequestHeader(t,e)}),o.send(void 0===t._bodyInit?null:t._bodyInit)})},e.fetch.polyfill=!0}function i(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function u(e){return"string"!=typeof e&&(e=String(e)),e}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return s.iterable&&(e[Symbol.iterator]=function(){return e}),e}function c(t){this.map={},t instanceof c?t.forEach(function(e,t){this.append(t,e)},this):Array.isArray(t)?t.forEach(function(e){this.append(e[0],e[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function h(e){if(e.bodyUsed)return b.reject(new TypeError("Already read"));e.bodyUsed=!0}function l(r){return new b(function(e,t){r.onload=function(){e(r.result)},r.onerror=function(){t(r.error)}})}function p(e){var t=new FileReader,r=l(t);return t.readAsArrayBuffer(e),r}function f(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e)if("string"==typeof e)this._bodyText=e;else if(s.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(s.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(s.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(s.arrayBuffer&&s.blob&&r(e))this._bodyArrayBuffer=f(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!s.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!n(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):s.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},s.blob&&(this.blob=function(){var e=h(this);if(e)return e;if(this._bodyBlob)return b.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return b.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return b.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?h(this)||b.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var e,t,r,n=h(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=l(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return b.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return b.resolve(this._bodyText)},s.formData&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(e,t){var r,n,a=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new c(e.headers)),this.method=e.method,this.mode=e.mode,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new c(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),-1<o.indexOf(n)?n:r),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(a)}function g(e){var a=new FormData;return e.trim().split("&").forEach(function(e){if(e){var t=e.split("="),r=t.shift().replace(/\+/g," "),n=t.join("=").replace(/\+/g," ");a.append(decodeURIComponent(r),decodeURIComponent(n))}}),a}function m(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new c(t.headers),this.url=t.url||"",this._initBody(e)}}(void 0!==e?e:this),{fetch:e.fetch,Headers:e.Headers,Request:e.Request,Response:e.Response}}()}t.exports=e}("undefined"==typeof self?m:self)})(),j={atob:self.atob.bind(self),btoa:self.btoa.bind(self)},q=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},w=function(){function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),O=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var s,i=e[Symbol.iterator]();!(n=(s=i.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{!n&&i.return&&i.return()}finally{if(a)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},x=T.Headers,_=T.Request,A=function(){function r(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];q(this,r),this.config(e,t)}return w(r,[{key:"config",value:function(e,t){var r=Object.assign({},this,e,{meta:t});r.endpoint&&r.endpoint.lastIndexOf("/")===r.endpoint.length-1&&(r.endpoint=r.endpoint.slice(0,-1)),this.endpoint=r.endpoint,this.username=r.username,this.password=r.password,this.meta=r.meta}},{key:"headers",value:function(){var e=new x;return e.set("Authorization","Basic "+j.btoa(this.username+":"+this.password)),e.set("Accept","*/*"),this.meta&&this.meta.createHeaders?this.meta.createHeaders({headers:e}):e}},{key:"uri",value:function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.endpoint+"/"+t.join("/")}},{key:"request",value:function(){return this.meta&&this.meta.createRequest?this.meta.createRequest({uri:this.uri.apply(this,arguments),Request:_}):this.uri.apply(this,arguments)}}]),r}(),S="object"==typeof self?self.FormData:window.FormData;var P=function(e,t,r,n){t=t||"&",r=r||"=";var a={};if("string"!=typeof e||0===e.length)return a;var o=/\+/g;e=e.split(t);var s=1e3;n&&"number"==typeof n.maxKeys&&(s=n.maxKeys);var i,u,d=e.length;0<s&&s<d&&(d=s);for(var c=0;c<d;++c){var h,l,p,f,v=e[c].replace(o,"%20"),y=v.indexOf(r);0<=y?(h=v.substr(0,y),l=v.substr(y+1)):(h=v,l=""),p=decodeURIComponent(h),f=decodeURIComponent(l),i=a,u=p,Object.prototype.hasOwnProperty.call(i,u)?Array.isArray(a[p])?a[p].push(f):a[p]=[a[p],f]:a[p]=f}return a},E=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},U=function(r,n,a,e){return n=n||"&",a=a||"=",null===r&&(r=void 0),"object"==typeof r?Object.keys(r).map(function(e){var t=encodeURIComponent(E(e))+a;return Array.isArray(r[e])?r[e].map(function(e){return t+encodeURIComponent(E(e))}).join(n):t+encodeURIComponent(E(r[e]))}).join(n):e?encodeURIComponent(E(e))+a+encodeURIComponent(E(r)):""},B=b(function(e,t){t.decode=t.parse=P,t.encode=t.stringify=U}),C=function(e){return null!=e&&(I(e)||"function"==typeof(t=e).readFloatLE&&"function"==typeof t.slice&&I(t.slice(0,0))||!!e._isBuffer);var t};function I(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var R=b(function(e){e.exports=t;function t(e,c){var h=(c=c||{}).delimiter||".",l=c.maxDepth,p={};return function s(i,u,d){d=d||1,Object.keys(i).forEach(function(e){var t=i[e],r=c.safe&&Array.isArray(t),n=Object.prototype.toString.call(t),a=C(t),o=u?u+h+e:e;if(!r&&!a&&("[object Object]"===n||"[object Array]"===n)&&Object.keys(t).length&&(!c.maxDepth||d<l))return s(t,o,d+1);p[o]=t})}(e),p}(t.flatten=t).unflatten=function i(u,d){d=d||{};var c=d.delimiter||".";var h=d.overwrite||!1;var l={};var e=C(u);if(e||"[object Object]"!==Object.prototype.toString.call(u))return u;function p(e){var t=Number(e);return isNaN(t)||-1!==e.indexOf(".")?e:t}Object.keys(u).forEach(function(e){for(var t=e.split(c),r=p(t.shift()),n=p(t[0]),a=l;void 0!==n;){var o=Object.prototype.toString.call(a[r]),s="[object Object]"===o||"[object Array]"===o;if(!h&&!s&&void 0!==a[r])return;(h&&!s||!h&&null==a[r])&&(a[r]="number"!=typeof n||d.object?{}:[]),a=a[r],0<t.length&&(r=p(t.shift()),n=p(t[0]))}a[r]=i(u[e],d)});return l}}),D=Array.isArray,k="object"==typeof m&&m&&m.Object===Object&&m,z="object"==typeof self&&self&&self.Object===Object&&self,F=k||z||Function("return this")(),L=F.Symbol,N=Object.prototype,J=N.hasOwnProperty,G=N.toString,H=L?L.toStringTag:void 0;var M=function(e){var t=J.call(e,H),r=e[H];try{var n=!(e[H]=void 0)}catch(e){}var a=G.call(e);return n&&(t?e[H]=r:delete e[H]),a},$=Object.prototype.toString;var K=function(e){return $.call(e)},X="[object Null]",V="[object Undefined]",W=L?L.toStringTag:void 0;var Z=function(e){return null==e?void 0===e?V:X:W&&W in Object(e)?M(e):K(e)};var Q=function(e){return null!=e&&"object"==typeof e},Y="[object Symbol]";var ee=function(e){return"symbol"==typeof e||Q(e)&&Z(e)==Y},te=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,re=/^\w*$/;var ne=function(e,t){if(D(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!ee(e))||re.test(e)||!te.test(e)||null!=t&&e in Object(t)};var ae=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},oe="[object AsyncFunction]",se="[object Function]",ie="[object GeneratorFunction]",ue="[object Proxy]";var de,ce=function(e){if(!ae(e))return!1;var t=Z(e);return t==se||t==ie||t==oe||t==ue},he=F["__core-js_shared__"],le=(de=/[^.]+$/.exec(he&&he.keys&&he.keys.IE_PROTO||""))?"Symbol(src)_1."+de:"";var pe=function(e){return!!le&&le in e},fe=Function.prototype.toString;var ve=function(e){if(null!=e){try{return fe.call(e)}catch(e){}try{return e+""}catch(e){}}return""},ye=/^\[object .+?Constructor\]$/,ge=Function.prototype,me=Object.prototype,be=ge.toString,Te=me.hasOwnProperty,je=RegExp("^"+be.call(Te).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var qe=function(e){return!(!ae(e)||pe(e))&&(ce(e)?je:ye).test(ve(e))};var we=function(e,t){return null==e?void 0:e[t]};var Oe=function(e,t){var r=we(e,t);return qe(r)?r:void 0},xe=Oe(Object,"create");var _e=function(){this.__data__=xe?xe(null):{},this.size=0};var Ae=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Se="__lodash_hash_undefined__",Pe=Object.prototype.hasOwnProperty;var Ee=function(e){var t=this.__data__;if(xe){var r=t[e];return r===Se?void 0:r}return Pe.call(t,e)?t[e]:void 0},Ue=Object.prototype.hasOwnProperty;var Be=function(e){var t=this.__data__;return xe?void 0!==t[e]:Ue.call(t,e)},Ce="__lodash_hash_undefined__";var Ie=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=xe&&void 0===t?Ce:t,this};function Re(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Re.prototype.clear=_e,Re.prototype.delete=Ae,Re.prototype.get=Ee,Re.prototype.has=Be,Re.prototype.set=Ie;var De=Re;var ke=function(){this.__data__=[],this.size=0};var ze=function(e,t){return e===t||e!=e&&t!=t};var Fe=function(e,t){for(var r=e.length;r--;)if(ze(e[r][0],t))return r;return-1},Le=Array.prototype.splice;var Ne=function(e){var t=this.__data__,r=Fe(t,e);return!(r<0||(r==t.length-1?t.pop():Le.call(t,r,1),--this.size,0))};var Je=function(e){var t=this.__data__,r=Fe(t,e);return r<0?void 0:t[r][1]};var Ge=function(e){return-1<Fe(this.__data__,e)};var He=function(e,t){var r=this.__data__,n=Fe(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this};function Me(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Me.prototype.clear=ke,Me.prototype.delete=Ne,Me.prototype.get=Je,Me.prototype.has=Ge,Me.prototype.set=He;var $e=Me,Ke=Oe(F,"Map");var Xe=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e};var Ve=function(e,t){var r=e.__data__;return Xe(t)?r["string"==typeof t?"string":"hash"]:r.map};var We=function(e){var t=Ve(this,e).delete(e);return this.size-=t?1:0,t};var Ze=function(e){return Ve(this,e).get(e)};var Qe=function(e){return Ve(this,e).has(e)};var Ye=function(e,t){var r=Ve(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this};function et(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}et.prototype.clear=function(){this.size=0,this.__data__={hash:new De,map:new(Ke||$e),string:new De}},et.prototype.delete=We,et.prototype.get=Ze,et.prototype.has=Qe,et.prototype.set=Ye;var tt=et,rt="Expected a function";function nt(a,o){if("function"!=typeof a||null!=o&&"function"!=typeof o)throw new TypeError(rt);var s=function(){var e=arguments,t=o?o.apply(this,e):e[0],r=s.cache;if(r.has(t))return r.get(t);var n=a.apply(this,e);return s.cache=r.set(t,n)||r,n};return s.cache=new(nt.Cache||tt),s}nt.Cache=tt;var at=nt,ot=500;var st=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,it=/\\(\\)?/g,ut=function(e){var t=at(e,function(e){return r.size===ot&&r.clear(),e}),r=t.cache;return t}(function(e){var a=[];return 46===e.charCodeAt(0)&&a.push(""),e.replace(st,function(e,t,r,n){a.push(r?n.replace(it,"$1"):t||e)}),a});var dt=function(e,t){for(var r=-1,n=null==e?0:e.length,a=Array(n);++r<n;)a[r]=t(e[r],r,e);return a},ct=1/0,ht=L?L.prototype:void 0,lt=ht?ht.toString:void 0;var pt=function e(t){if("string"==typeof t)return t;if(D(t))return dt(t,e)+"";if(ee(t))return lt?lt.call(t):"";var r=t+"";return"0"==r&&1/t==-ct?"-0":r};var ft=function(e){return null==e?"":pt(e)};var vt=function(e,t){return D(e)?e:ne(e,t)?[e]:ut(ft(e))},yt=1/0;var gt=function(e){if("string"==typeof e||ee(e))return e;var t=e+"";return"0"==t&&1/e==-yt?"-0":t};var mt=function(e,t){for(var r=0,n=(t=vt(t,e)).length;null!=e&&r<n;)e=e[gt(t[r++])];return r&&r==n?e:void 0};var bt=function(e,t,r){var n=null==e?void 0:mt(e,t);return void 0===n?r:n},Tt=function(){try{var e=Oe(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();var jt=function(e,t,r){"__proto__"==t&&Tt?Tt(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r},qt=Object.prototype.hasOwnProperty;var wt=function(e,t,r){var n=e[t];qt.call(e,t)&&ze(n,r)&&(void 0!==r||t in e)||jt(e,t,r)},Ot=9007199254740991,xt=/^(?:0|[1-9]\d*)$/;var _t=function(e,t){var r=typeof e;return!!(t=null==t?Ot:t)&&("number"==r||"symbol"!=r&&xt.test(e))&&-1<e&&e%1==0&&e<t};var At=function(e,t,r,n){if(!ae(e))return e;for(var a=-1,o=(t=vt(t,e)).length,s=o-1,i=e;null!=i&&++a<o;){var u=gt(t[a]),d=r;if(a!=s){var c=i[u];void 0===(d=n?n(c,u,i):void 0)&&(d=ae(c)?c:_t(t[a+1])?[]:{})}wt(i,u,d),i=i[u]}return e};var St=function(e,t,r){for(var n=-1,a=t.length,o={};++n<a;){var s=t[n],i=mt(e,s);r(i,s)&&At(o,vt(s,e),i)}return o};var Pt=function(e,t){return null!=e&&t in Object(e)},Et="[object Arguments]";var Ut=function(e){return Q(e)&&Z(e)==Et},Bt=Object.prototype,Ct=Bt.hasOwnProperty,It=Bt.propertyIsEnumerable,Rt=Ut(function(){return arguments}())?Ut:function(e){return Q(e)&&Ct.call(e,"callee")&&!It.call(e,"callee")},Dt=9007199254740991;var kt=function(e){return"number"==typeof e&&-1<e&&e%1==0&&e<=Dt};var zt=function(e,t,r){for(var n=-1,a=(t=vt(t,e)).length,o=!1;++n<a;){var s=gt(t[n]);if(!(o=null!=e&&r(e,s)))break;e=e[s]}return o||++n!=a?o:!!(a=null==e?0:e.length)&&kt(a)&&_t(s,a)&&(D(e)||Rt(e))};var Ft=function(e,t){return null!=e&&zt(e,t,Pt)};var Lt=function(r,e){return St(r,e,function(e,t){return Ft(r,t)})};var Nt=function(e,t){for(var r=-1,n=t.length,a=e.length;++r<n;)e[a+r]=t[r];return e},Jt=L?L.isConcatSpreadable:void 0;var Gt=function(e){return D(e)||Rt(e)||!!(Jt&&e&&e[Jt])};var Ht=function e(t,r,n,a,o){var s=-1,i=t.length;for(n||(n=Gt),o||(o=[]);++s<i;){var u=t[s];0<r&&n(u)?1<r?e(u,r-1,n,a,o):Nt(o,u):a||(o[o.length]=u)}return o};var Mt=function(e){return null!=e&&e.length?Ht(e,1):[]};var $t=function(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)},Kt=Math.max;var Xt=function(o,s,i){return s=Kt(void 0===s?o.length-1:s,0),function(){for(var e=arguments,t=-1,r=Kt(e.length-s,0),n=Array(r);++t<r;)n[t]=e[s+t];t=-1;for(var a=Array(s+1);++t<s;)a[t]=e[t];return a[s]=i(n),$t(o,this,a)}};var Vt=function(e){return function(){return e}};var Wt=Tt?function(e,t){return Tt(e,"toString",{configurable:!0,enumerable:!1,value:Vt(t),writable:!0})}:function(e){return e},Zt=800,Qt=16,Yt=Date.now;var er=function(r){var n=0,a=0;return function(){var e=Yt(),t=Qt-(e-a);if(a=e,0<t){if(++n>=Zt)return arguments[0]}else n=0;return r.apply(void 0,arguments)}}(Wt);var tr=function(e){return er(Xt(e,void 0,Mt),e+"")}(function(e,t){return null==e?{}:Lt(e,t)}),rr=b(function(e){var t=["status","statusText","headers","ok","url"];e.exports={httpBody:function(r){var n=r.headers.get("content-type"),a=tr(r,t);return n&&-1<n.indexOf("json")?r.json().then(function(e){return a.body=e,a}):r.text().then(function(e){var t=e.trim();return a.body=t,"text/boolean"===n&&(a.body="true"===t.toLowerCase()),204===r.status&&(a.body=null),""===t&&(a.body=null),a})},httpMessage:function(e){return tr(e,t)}}}),nr={database:{archetypes:null,connection:{timeout:null},creator:null,name:null,namespaces:null,online:null,time:{creation:null,modification:null}},docs:{default:{rdf:{extractors:null},text:{extractors:null}},filesystem:{uri:null},path:null},icv:{active:{graphs:null},consistency:{automatic:null},enabled:null,reasoning:{enabled:null}},index:{differential:{enable:{limit:null},merge:{limit:null},size:null},disk:{page:{count:{total:null,used:null},fill:{ratio:null}}},last:{tx:null},literals:{canonical:null},named:{graphs:null},persist:null,size:null,statistics:{update:{automatic:null}},type:null},preserve:{bnode:{ids:null}},progress:{monitor:{enabled:null}},query:{all:{graphs:null},plan:{reuse:null},timeout:null},reasoning:{approximate:null,classify:{eager:null},consistency:{automatic:null},punning:{enabled:null},sameas:null,schema:{graphs:null,timeout:null},type:null,virtual:{graph:{enabled:null}}},search:{default:{limit:null},enabled:null,index:{datatypes:null},reindex:{tx:null},wildcard:{search:{enabled:null}}},security:{named:{graphs:null}},spatial:{enabled:null,index:{version:null},precision:null},strict:{parsing:null},transaction:{isolation:null,logging:null},versioning:{directory:null,enabled:null}},ar=b(function(e){var n=T.fetch,o=rr.httpBody,s=function(e,t,r){return t.headers.set("Content-Type","application/json"),n(e.request("admin","databases",t.database,"options"),{method:t.method,headers:t.headers,body:JSON.stringify(R(r,{safe:!0}))})};e.exports={get:function(e,t,r){var n=e.headers();return s(e,{headers:n,database:t,method:"PUT"},nr).then(o).then(function(e){return 200===e.status?Object.assign({},e,{body:R.unflatten(e.body)}):e})},set:function(e,t,r,n){var a=e.headers();return s(e,{headers:a,database:t,method:"POST"},r).then(o)}}}),or=b(function(e){var u=T.fetch,d=rr.httpBody,n=ar.get,s=function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=e.headers();a.set("Accept","text/plain"),a.set("Content-Type",t.contentType||"text/plain"),t.encoding&&a.set("Content-Encoding",t.encoding);var o={};n.graphUri&&(o["graph-uri"]=n.graphUri);var s=B.stringify(o),i=t.resource+(0<s.length?"?"+s:"");return u(e.request(t.database,t.transactionId,i),{method:"POST",headers:a,body:r}).then(d).then(function(e){return Object.assign({},e,{transactionId:t.transactionId})})};e.exports={create:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=(arguments[4],e.headers()),o=R(r),s=new S;return s.append("root",JSON.stringify({dbname:t,options:o,files:n.files})),u(e.request("admin","databases"),{method:"POST",headers:a,body:s}).then(d)},drop:function(e,t,r){var n=e.headers();return u(e.request("admin","databases",t),{method:"DELETE",headers:n}).then(d)},get:function(e,t,r){var n=e.headers();return u(e.request(t),{headers:n}).then(d)},offline:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),u(e.request("admin","databases",t,"offline"),{method:"PUT",headers:n}).then(d)},online:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),u(e.request("admin","databases",t,"online"),{method:"PUT",headers:n}).then(d)},optimize:function(e,t,r){var n=e.headers();return u(e.request("admin","databases",t,"optimize"),{method:"PUT",headers:n}).then(d)},copy:function(e,t,r,n){var a=e.headers();a.set("Accept","application/json");var o="copy?"+B.stringify({to:r});return u(e.request("admin","databases",t,o),{method:"PUT",headers:a}).then(d)},list:function(e,t){var r=e.headers();return r.set("Accept","application/json"),u(e.request("admin","databases"),{headers:r}).then(d)},size:function(e,t,r){var n=e.headers();return n.set("Accept","text/plain"),u(e.request(t,"size"),{headers:n}).then(d)},clear:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=e.headers();a.set("Accept","text/plain");var o={};n.graphUri&&(o["graph-uri"]=n.graphUri);var s=B.stringify(o),i="clear"+(0<s.length?"?"+s:"");return u(e.request(t,r,i),{method:"POST",headers:a}).then(d).then(function(e){return Object.assign({},e,{transactionId:r})})},add:function(e,t,r,n){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:{};return s(e,{contentType:a.contentType,encoding:a.encoding,resource:"add",database:t,transactionId:r},n,o)},remove:function(e,t,r,n){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:{};return s(e,{contentType:a.contentType,encoding:a.encoding,resource:"remove",database:t,transactionId:r},n,o)},namespaces:function(e,t,r){return n(e,t,r).then(function(e){if(200===e.status){var t=bt(e,"body.database.namespaces",[]).reduce(function(e,t){var r,n,a,o=t.split("="),s=O(o,2),i=s[0],u=s[1];return Object.assign({},e,(a=u,(n=i)in(r={})?Object.defineProperty(r,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[n]=a,r))},{});e.body=t}return e})},exportData:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=e.headers();a.set("Accept",r.mimetype||"application/ld+json");var o={"graph-uri":n.graphUri||"tag:stardog:api:context:all"},s="export?"+B.stringify(o);return u(e.request(t,s),{headers:a}).then(d)}}}),sr=b(function(e){var c=T.fetch,h=rr.httpBody;e.exports={add:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=(4<arguments.length&&void 0!==arguments[4]&&arguments[4],e.headers());return a.set("Content-Type",n.contentType||"text/turtle"),c(e.request(t,"icv","add"),{method:"POST",body:r,headers:a}).then(h)},remove:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=(4<arguments.length&&void 0!==arguments[4]&&arguments[4],e.headers());return a.set("Content-Type",n.contentType||"text/turtle"),c(e.request(t,"icv","remove"),{method:"POST",body:r,headers:a}).then(h)},get:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return r.set("Accept","application/ld+json"),c(e.request(t,"icv"),{headers:r}).then(h)},clear:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return c(e.request(t,"icv","clear"),{method:"POST",headers:r}).then(h)},convert:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=e.headers();o.set("Content-Type",n.contentType||"text/turtle");var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var i=B.stringify(s),u="convert"+(0<i.length?"?"+i:"");return c(e.request(t,"icv",u),{method:"POST",body:r,headers:o}).then(h)},validate:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=e.headers();o.set("Content-Type",n.contentType||"text/turtle"),o.set("Accept","text/boolean");var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var i=B.stringify(s),u="validate"+(0<i.length?"?"+i:"");return c(e.request(t,"icv",u),{method:"POST",body:r,headers:o}).then(h)},validateInTx:function(e,t,r,n){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:{},s=e.headers();s.set("Content-Type",a.contentType||"text/turtle"),s.set("Accept","text/boolean");var i={};o.graphUri&&(i["graph-uri"]=o.graphUri);var u=B.stringify(i),d="validate"+(0<u.length?"?"+u:"");return c(e.request(t,"icv",r,d),{method:"POST",body:n,headers:s}).then(h)},violations:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=e.headers();o.set("Content-Type",n.contentType||"text/turtle"),o.set("Accept","*/*");var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var i=B.stringify(s),u="violations"+(0<i.length?"?"+i:"");return c(e.request(t,"icv",u),{method:"POST",body:r,headers:o}).then(h)},violationsInTx:function(e,t,r,n){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:{},s=e.headers();s.set("Content-Type",a.contentType||"text/turtle"),s.set("Accept","*/*");var i={};o.graphUri&&(i["graph-uri"]=o.graphUri);var u=B.stringify(i),d="violations"+(0<u.length?"?"+u:"");return c(e.request(t,"icv",r,d),{method:"POST",body:n,headers:s}).then(h)}}}),ir=b(function(e){var a=T.fetch,o=rr.httpBody,s=function(t){return function(e){return Object.assign({},e,{transactionId:t})}};e.exports={begin:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return r.set("Accept","*/*"),a(e.request(t,"transaction","begin"),{method:"POST",headers:r}).then(o).then(function(e){return Object.assign({},e,{transactionId:e.body})})},rollback:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return a(e.request(t,"transaction","rollback",r),{method:"POST",headers:n}).then(o).then(s(r))},commit:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return a(e.request(t,"transaction","commit",r),{method:"POST",headers:n}).then(o).then(s(r))}}}),ur=b(function(e){var i=T.fetch,u=rr.httpBody;e.exports={doGet:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:"application/ld+json",a=(4<arguments.length&&void 0!==arguments[4]&&arguments[4],e.headers());a.set("Accept",n);var o=t+"?"+(r?B.stringify({graph:r}):"default");return i(e.request(o),{headers:a}).then(u)},doPut:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:"application/ld+json",o=(5<arguments.length&&void 0!==arguments[5]&&arguments[5],e.headers());o.set("Content-Type",a);var s=t+"?"+(n?B.stringify({graph:n}):"default");return i(e.request(s),{headers:o,method:"PUT",body:r}).then(u)},doPost:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:"application/ld+json",o=(5<arguments.length&&void 0!==arguments[5]&&arguments[5],e.headers());o.set("Content-Type",a);var s=t+"?"+(n?B.stringify({graph:n}):"default");return i(e.request(s),{headers:o,method:"POST",body:r}).then(u)},doDelete:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=(3<arguments.length&&void 0!==arguments[3]&&arguments[3],e.headers()),a=t+"?"+(r?B.stringify({graph:r}):"default");return i(e.request(a),{headers:n,method:"DELETE"}).then(u)}}}),dr=b(function(e){var s=T.fetch,i=rr.httpBody,u=function(e){return e.headers.set("Content-Type","application/json"),e};e.exports={consistency:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},n=(3<arguments.length&&void 0!==arguments[3]&&arguments[3],e.headers());n.set("Accept","text/boolean");var a="consistency"+(r.namedGraph?"?graph-uri="+r.namedGraph:"");return s(e.request(t,"reasoning",a),{headers:n}).then(i)},explainInference:function(e,t,r,n,a){var o=e.headers();return o.set("Content-Type",n.contentType),o.set("Accept","application/json"),s(e.request(t,"reasoning","explain"),{method:"POST",headers:o,body:r}).then(u).then(i)},explainInconsistency:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},n=(3<arguments.length&&void 0!==arguments[3]&&arguments[3],e.headers());n.set("Accept","application/json");var a="inconsistency"+(r.namedGraph?"?graph-uri="+r.namedGraph:"");return s(e.request(t,"reasoning","explain",a),{method:"POST",headers:n}).then(u).then(i)},explainInferenceInTransaction:function(e,t,r,n,a){5<arguments.length&&void 0!==arguments[5]&&arguments[5];var o=e.headers();return o.set("Content-Type",a.contentType),a.encoding&&o.set("Content-Encoding",a.encoding),s(e.request(t,"reasoning",r,"explain"),{method:"POST",headers:o,body:n}).then(i)},explainInconsistencyInTransaction:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=(4<arguments.length&&void 0!==arguments[4]&&arguments[4],e.headers()),o="inconsistency"+(n.namedGraph?"?graph-uri="+n.namedGraph:"");return s(e.request(t,"reasoning",r,"explain",o),{method:"POST",headers:a}).then(i)},schema:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return r.set("Accept","application/ld+json"),s(e.request(t,"reasoning","schema"),{headers:r}).then(i)}}}),cr=b(function(e){var s=T.fetch,i=rr.httpBody;e.exports={size:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return r.set("Accept","text/plain"),s(e.request(t,"docs","size"),{headers:r}).then(i)},clear:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return s(e.request(t,"docs"),{method:"DELETE",headers:r}).then(i)},add:function(e,t,r,n){4<arguments.length&&void 0!==arguments[4]&&arguments[4];var a=e.headers(),o=new S;return o.append("upload",new Buffer(n),{filename:r}),s(e.request(t,"docs"),{method:"POST",body:o,headers:a}).then(i)},remove:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return s(e.request(t,"docs",r),{method:"DELETE",headers:n}).then(i)},get:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return s(e.request(t,"docs",r),{headers:n}).then(i)}}}),hr=b(function(e){var r=function(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t},n=function(e){var t=e.replace(/prefix[^:]+:\s*<[^>]*>\s*/gi,"").replace(/^((base\s+<[^>]*>\s*)|([\t ]*#([^\n\r]*)))([\r|\r\n|\n])/gim,"").replace(/\s/g,"").toLowerCase();return r(t,"select")?"select":r(t,"ask")?"ask":r(t,"construct")?"construct":r(t,"describe")?"describe":r(t,"insert")||r(t,"delete")||r(t,"with")||r(t,"load")||r(t,"clear")||r(t,"create")||r(t,"drop")||r(t,"copy")||r(t,"move")||r(t,"add")?"update":r(t,"paths")?"paths":null};e.exports={queryType:n,mimeType:function(e){var t=n(e);return"select"===t||"paths"===t?"application/sparql-results+json":"ask"===t||"update"===t?"text/boolean":"construct"===t||"describe"===t?"text/turtle":"*/*"}}}),lr=b(function(e){var u=T.fetch,d=rr.httpBody,c=hr.mimeType;e.exports={query:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:c(r),a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=e.headers();o.set("Accept",n),o.set("Content-Type","application/x-www-form-urlencoded");var s=B.stringify(a),i="query"+(0<s.length?"?"+s:"");return u(e.request(t,"vcs",i),{method:"POST",body:B.stringify({query:r}),headers:o}).then(d)},commit:function(e,t,r,n){4<arguments.length&&void 0!==arguments[4]&&arguments[4];var a=e.headers();return a.set("Content-Type","text/plain"),u(e.request(t,"vcs",r,"commit_msg"),{method:"POST",body:n,headers:a}).then(d)},createTag:function(e,t,r,n){4<arguments.length&&void 0!==arguments[4]&&arguments[4];var a=e.headers();return a.set("Content-Type","text/plain"),u(e.request(t,"vcs","tags","create"),{method:"POST",body:'"tag:stardog:api:versioning:version:'+r+'", "'+n+'"',headers:a}).then(d)},deleteTag:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return n.set("Content-Type","text/plain"),u(e.request(t,"vcs","tags","delete"),{method:"POST",body:r,headers:n}).then(d)},revert:function(e,t,r,n,a){5<arguments.length&&void 0!==arguments[5]&&arguments[5];var o=e.headers();return o.set("Content-Type","text/plain"),u(e.request(t,"vcs","revert"),{method:"POST",body:'"tag:stardog:api:versioning:version:'+n+'", "tag:stardog:api:versioning:version:'+r+'", "'+a+'"',headers:o}).then(d)}}}),pr=Object.assign({},or,{icv:sr},{transaction:ir},{options:ar},{docs:cr},{versioning:lr},{graph:ur},{reasoning:dr}),fr=b(function(e){var d=T.fetch,c=rr.httpBody,h=hr.mimeType,l=hr.queryType,s=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:t.accept,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=e.headers();a.set("Accept",r),a.set("Content-Type","application/x-www-form-urlencoded");var o=B.stringify(n),s=t.resource+(0<o.length?"?"+o:"");return d(e.request(t.database,s),{method:"POST",body:B.stringify({query:t.query}),headers:a}).then(c).then(function(e){return e.body&&e.body.head&&e.body.head.vars&&(e.body.head.vars=[].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(new Set(e.body.head.vars)))),e})},a=function(e,t,r,n,a){var o=l(r);return s(e,{database:t,query:r,accept:h(r),resource:"update"===o?"update":"query"},n,a)};e.exports={execute:a,executeInTransaction:function(e,t,r,n){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:{},s=e.headers();s.set("Accept",a.accept||h(n)),s.set("Content-Type","application/x-www-form-urlencoded");var i=B.stringify(o),u=("update"===l(n)?"update":"query")+(0<i.length?"?"+i:"");return d(e.request(t,r,u),{method:"POST",headers:s,body:B.stringify({query:n})}).then(c).then(function(e){return Object.assign({},e,{transactionId:r})})},property:function(e,t,r,n){return a(e,t,"select * where {\n      "+r.uri+" "+r.property+" ?val\n    }\n    ",n).then(function(e){var t=bt(e,"body.results.bindings",[]);return 0<t.length?Object.assign({},e,{body:t[0].val.value}):e})},list:function(e){var t=e.headers();return t.set("Accept","application/json"),d(e.request("admin","queries"),{headers:t}).then(c)},kill:function(e,t){var r=e.headers();return d(e.request("admin","queries",t),{method:"DELETE",headers:r}).then(c)},get:function(e,t){var r=e.headers();return r.set("Accept","application/json"),d(e.request("admin","queries",t),{headers:r}).then(c)},explain:function(e,t,r,n){var a=e.headers();a.set("Accept","text/plain"),a.set("Content-Type","application/x-www-form-urlencoded");var o=B.stringify(n),s="explain"+(0<o.length?"?"+o:"");return d(e.request(t,s),{method:"POST",headers:a,body:B.stringify({query:r})}).then(c)}}}),vr=b(function(e){var o=T.fetch,s=rr.httpBody;e.exports={create:function(e,t,r){var n=e.headers();n.set("Content-Type","application/json"),n.set("Accept","application/json");var a=tr(t,["name","database","query","shared"]);return a.creator=e.username,a.shared="boolean"==typeof a.shared&&a.shared,o(e.request("admin","queries","stored"),{headers:n,method:"POST",body:JSON.stringify(a)}).then(s)},list:function(e,t){var r=e.headers();return r.set("Accept","application/json"),o(e.request("admin","queries","stored"),{headers:r}).then(s)},remove:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),o(e.request("admin","queries","stored",t),{headers:n,method:"DELETE"}).then(s)}}}),yr=b(function(e){var o=T.fetch,s=rr.httpBody;e.exports={execute:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},a=(4<arguments.length&&void 0!==arguments[4]&&arguments[4],e.headers());return o(e.request(t,"graphql"),{method:"POST",body:JSON.stringify({query:r,variables:n}),headers:a}).then(s)},listSchemas:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return o(e.request(t,"graphql","schemas"),{headers:r}).then(s)},addSchema:function(e,t,r,n){4<arguments.length&&void 0!==arguments[4]&&arguments[4];var a=e.headers();return a.set("Content-Type","application/graphql"),o(e.request(t,"graphql","schemas",r),{method:"PUT",body:n,headers:a}).then(s)},getSchema:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return o(e.request(t,"graphql","schemas",r),{headers:n}).then(s)},removeSchema:function(e,t,r){3<arguments.length&&void 0!==arguments[3]&&arguments[3];var n=e.headers();return o(e.request(t,"graphql","schemas",r),{method:"DELETE",headers:n}).then(s)},clearSchemas:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return o(e.request(t,"graphql","schemas"),{method:"DELETE",headers:r})}}}),gr=Object.assign({},fr,{stored:vr},{graphql:yr},{utils:hr}),mr=b(function(e){var s=T.fetch,o=rr.httpBody,i=rr.httpMessage;e.exports={list:function(e,t){var r=e.headers();return s(e.request("admin","users"),{headers:r}).then(o)},get:function(e,t,r){var n=e.headers();return s(e.request("admin","users",t),{headers:n}).then(o)},create:function(e,t,r){var n=e.headers();n.set("Accept","application/json"),n.set("Content-Type","application/json");var a={username:t.name,password:t.password.split(""),superuser:"boolean"==typeof t.superuser&&t.superuser};return s(e.request("admin","users"),{method:"POST",headers:n,body:JSON.stringify(a)}).then(o)},changePassword:function(e,t,r,n){var a=e.headers();a.set("Accept","application/json");var o={password:r};return s(e.request("admin","users",t,"pwd"),{method:"PUT",headers:a,body:JSON.stringify(o)}).then(i)},valid:function(e,t){var r=e.headers();return s(e.request("admin","users","valid"),{headers:r}).then(o)},enabled:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","users",t,"enabled"),{headers:n}).then(o)},enable:function(e,t,r,n){var a=e.headers();return s(e.request("admin","users",t,"enabled"),{method:"PUT",headers:a,body:JSON.stringify({enabled:r})}).then(i)},setRoles:function(e,t,r,n){var a=e.headers();return a.set("Content-Type","application/json"),s(e.request("admin","users",t,"roles"),{method:"PUT",headers:a,body:JSON.stringify({roles:r})}).then(i)},listRoles:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","users",t,"roles"),{headers:n}).then(o)},assignPermission:function(e,t,r,n){var a=e.headers(),o={action:r.action,resource_type:r.resourceType,resource:r.resources};return s(e.request("admin","permissions","user",t),{method:"PUT",headers:a,body:JSON.stringify(o)}).then(i)},deletePermission:function(e,t,r,n){var a=e.headers();a.set("Content-Type","application/json");var o={action:r.action,resource_type:r.resourceType,resource:r.resources};return s(e.request("admin","permissions","user",t,"delete"),{method:"POST",headers:a,body:JSON.stringify(o)}).then(i)},permissions:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","permissions","user",t),{headers:n}).then(o)},effectivePermissions:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","permissions","effective","user",t),{headers:n}).then(o)},superUser:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","users",t,"superuser"),{headers:n}).then(o)},remove:function(e,t,r){var n=e.headers();return s(e.request("admin","users",t),{method:"DELETE",headers:n}).then(i)}}}),br=b(function(e){var s=T.fetch,i=rr.httpBody,u=rr.httpMessage;e.exports={create:function(e,t,r){var n=e.headers();return s(e.request("admin","roles"),{method:"POST",headers:n,body:JSON.stringify({rolename:t.name})}).then(u)},list:function(e,t){var r=e.headers();return r.set("Accept","application/json"),s(e.request("admin","roles"),{headers:r}).then(i)},remove:function(e,t,r){var n=e.headers();return s(e.request("admin","roles",t),{method:"DELETE",headers:n}).then(u)},usersWithRole:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","roles",t,"users"),{headers:n}).then(i)},assignPermission:function(e,t,r,n){var a=e.headers();a.set("Content-Type","application/json");var o={action:r.action,resource_type:r.resourceType,resource:r.resources};return s(e.request("admin","permissions","role",t),{method:"PUT",headers:a,body:JSON.stringify(o)}).then(i)},deletePermission:function(e,t,r,n){var a=e.headers();a.set("Content-Type","application/json");var o={action:r.action,resource_type:r.resourceType,resource:r.resources};return s(e.request("admin","permissions","role",t,"delete"),{method:"POST",headers:a,body:JSON.stringify(o)}).then(u)},permissions:function(e,t,r){var n=e.headers();return n.set("Accept","application/json"),s(e.request("admin","permissions","role",t),{headers:n}).then(i)}}}),Tr=Object.assign({},mr,{role:br}),jr=b(function(e){var a=T.fetch,n=rr.httpMessage,o=rr.httpBody;e.exports={shutdown:function(e,t){var r=e.headers();return r.set("Accept","application/json"),a(e.request("admin","shutdown"),{headers:r}).then(n)},status:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=e.headers();r.set("Accept","application/json");var n=B.stringify(t);return a(e.request("admin","status"+(0<n.length?"?"+n:"")),{headers:r}).then(o)}}}),qr=b(function(e){var o=T.fetch,s=rr.httpBody;e.exports={list:function(e){var t=e.headers();return o(e.request("admin","virtual_graphs"),{headers:t}).then(s)},add:function(e,t,r,n){var a=e.headers();return a.set("Content-Type","application/json"),o(e.request("admin","virtual_graphs"),{method:"POST",body:JSON.stringify({name:t,mappings:r,options:n}),headers:a}).then(s)},update:function(e,t,r,n){var a=e.headers();return a.set("Content-Type","application/json"),o(e.request("admin","virtual_graphs",t),{method:"PUT",body:JSON.stringify({name:t,mappings:r,options:n}),headers:a}).then(s)},remove:function(e,t){var r=e.headers();return o(e.request("admin","virtual_graphs",t),{method:"DELETE",headers:r}).then(s)},available:function(e,t){var r=e.headers();return r.set("Accept","application/json"),o(e.request("admin","virtual_graphs",t,"available"),{headers:r}).then(s)},options:function(e,t){var r=e.headers();return o(e.request("admin","virtual_graphs",t,"options"),{headers:r}).then(s)},mappings:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},n=e.headers();if(r.preferUntransformed){var a=r.syntax||"SMS2";return o(e.request("admin","virtual_graphs",t,"mappingsString",a),{headers:n}).then(s)}return o(e.request("admin","virtual_graphs",t,"mappings"),{headers:n}).then(s)}}}),wr=b(function(e){var n=T.fetch,a=rr.httpBody;e.exports={add:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return n(e.request("admin","functions","stored"),{method:"POST",body:t,headers:r}).then(a)},get:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return n(e.request("admin","functions","stored?"+B.stringify({name:t})),{headers:r}).then(a)},remove:function(e,t){2<arguments.length&&void 0!==arguments[2]&&arguments[2];var r=e.headers();return n(e.request("admin","functions","stored?"+B.stringify({name:t})),{method:"DELETE",headers:r})},clear:function(e){1<arguments.length&&void 0!==arguments[1]&&arguments[1];var t=e.headers();return n(e.request("admin","functions","stored"),{method:"DELETE",headers:t})},getAll:function(e){1<arguments.length&&void 0!==arguments[1]&&arguments[1];var t=e.headers();return n(e.request("admin","functions","stored"),{headers:t}).then(a)}}});return{version:(g&&y||g).version,Connection:A,db:pr,query:gr,user:Tr,server:jr,virtualGraphs:qr,storedFunctions:wr}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
